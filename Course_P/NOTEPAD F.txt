import sys


def NAV_SAR():
    board = []
    for i in range(24):
        board.append('x')

    printBoard(board)
    for i in range(9):
        # FOR PLAYER 1, STAGE 1

        finished1 = False
        while not finished1:
            try:
                pos1 = int(input("\n PLAYER 1: Place a piece '1': "))
                print()
                if pos1 == 99:
                    sys.exit()
                if board[pos1] == 'x':
                    board[pos1] = '1'
                    if isMill(pos1, board):
                        itemPlaced = False
                        while not itemPlaced:
                            try:
                                pos2 = int(
                                    input('\nA Mill is formed.\nRemove a 2 piece: '))
                                if board[pos2] == '2' and not isMill(pos2, board) or (
                                        isMill(pos2, board) and numOfPieces(board, '1') == 3):
                                    board[pos2] = 'x'
                                    itemPlaced = True
                                else:
                                    print("Invalid Position! Try again!")
                            except Exception as e:
                                print("Input out of bounds")
                                print(str(e))

                    finished1 = True

                else:
                    print("There is already a piece in position %d !", pos1)
            except Exception as e:
                print("Couldn't get the input value!")
                print(str(e))

        printBoard(board)

        # FOR PLAYER 2, STAGE 1

        finished2 = False
        while not finished2:
            try:
                pos1 = int(input("\n PLAYER 2: Place a piece '2': "))
                print()
                if pos1 == 99:
                    sys.exit()
                if board[pos1] == 'x':
                    board[pos1] = '2'
                    if isMill(pos1, board):
                        itemPlaced = False
                        while not itemPlaced:
                            try:
                                pos2 = int(
                                    input('\nA Mill is formed.\nRemove a 1 piece: '))
                                if board[pos2] == '1' and not isMill(pos2, board) or (
                                        isMill(pos2, board) and numOfPieces(board, '2') == 3):
                                    board[pos2] = 'x'
                                    itemPlaced = True
                                else:
                                    print("Invalid Position! Try again!")
                            except Exception as e:
                                print("Input out of bounds")
                                print(str(e))

                    finished2 = True

                else:
                    print("There is already a piece in position %d !", pos1)
            except Exception as e:
                print("Couldn't get the input value!")
                print(str(e))

        printBoard(board)

    print('\n')
    print("STAGE 2")
    print('\n')

    while True:

        # PLAYER 1 STAGE 1 MOVE

        printBoard(board)
        userMoved = False
        while not userMoved:
            try:
                movable = False

                if numOfPieces(board, '1') == 3:
                    only3 = True
                else:
                    only3 = False

                while not movable:
                    pos1 = int(
                        input("\nPLAYER 1: Which '1' piece will you move?: "))

                    while board[pos1] != '1':
                        print("Invalid. Try again.")
                        pos1 = int(
                            input("\nPLAYER 1: Which '1' piece will you move?: "))

                    if only3:
                        movable = True
                        print("Stage 3 for Player 1. Allowed to Fly")
                        break

                    possibleMoves = adjacentLocations(pos1)

                    for adjpos in possibleMoves:
                        if board[adjpos] == 'x':
                            movable = True
                            break
                    if movable == False:
                        print("No empty adjacent pieces!")

                userPlaced = False

                while not userPlaced:
                    newpos1 = int(input("'1' New Position is : "))

                    if newpos1 in adjacentLocations(pos1) or only3:

                        if board[newpos1] == 'x':
                            board[pos1] = 'x'
                            board[newpos1] = '1'

                            if isMill(newpos1, board):
                                userRemoved = False
                                while not userRemoved:
                                    try:
                                        printBoard(board)
                                        removepos1 = int(
                                            input("\n Mill Formed. Remove a '2' piece: "))

                                        if board[removepos1] == '2' and not isMill(removepos1, board) or (
                                                isMill(removepos1, board) and numOfPieces(board, "1") == 3):
                                            board[removepos1] = 'x'
                                            userRemoved = True
                                        else:
                                            print("Invalid Position")
                                    except Exception as e:
                                        print(str(e))
                                        print("Error while accepting input")

                            userPlaced = True
                            userMoved = True

                        else:
                            print("Invalid Position")

                    else:
                        print("Only adjacent locations in Stage 2. Try again.")

            except Exception as e:
                print(str(e))

        if (len(possibleMoves_stage2or3(board, '1')) == 0):
            print("-----------")
            print("    TIE    ")
            print("-----------")
            sys.exit()

        elif numOfPieces(board, '2') < 3:
            print("PLAYER 1 WINS")
            sys.exit()

        else:
            printBoard(board)

        # PLAYER 2 STAGE 2 MOVE

        userMoved = False
        while not userMoved:
            try:
                movable = False

                if numOfPieces(board, '2') == 3:
                    only3 = True
                else:
                    only3 = False

                while not movable:
                    pos1 = int(
                        input("\nPLAYER 2: Which '2' piece will you move?: "))

                    while board[pos1] != '2':
                        print("Invalid. Try again.")
                        pos1 = int(
                            input("\nPLAYER 2: Which '2' piece will you move?: "))

                    if only3:
                        movable = True
                        print("Stage 3 for Player 2. Allowed to Fly")
                        break

                    possibleMoves = adjacentLocations(pos1)

                    for adjpos in possibleMoves:
                        if board[adjpos] == 'x':
                            movable = True
                            break
                    if movable == False:
                        print("No empty adjacent pieces!")

                userPlaced = False

                while not userPlaced:
                    newpos1 = int(input("'2' New Position is : "))

                    if newpos1 in adjacentLocations(pos1) or only3:

                        if board[newpos1] == 'x':
                            board[pos1] = 'x'
                            board[newpos1] = '2'

                            if isMill(newpos1, board):
                                userRemoved = False
                                while not userRemoved:
                                    try:
                                        printBoard(board)
                                        removepos1 = int(
                                            input("\n Mill Formed. Remove a '1' piece: "))

                                        if board[removepos1] == '1' and not isMill(removepos1, board) or (
                                                isMill(removepos1, board) and numOfPieces(board, "2") == 3):
                                            board[removepos1] = 'x'
                                            userRemoved = True
                                        else:
                                            print("Invalid Position")
                                    except Exception as e:
                                        print(str(e))
                                        print("Error while accepting input")

                            userPlaced = True
                            userMoved = True

                        else:
                            print("Invalid Position")

                    else:
                        print("Only adjacent locations in Stage 2. Try again.")

            except Exception as e:
                print(str(e))

        if (len(possibleMoves_stage2or3(board, '2')) == 0):
            print("-----------")
            print("    TIE    ")
            print("-----------")
            sys.exit()

        elif numOfPieces(board, '1') < 3:
            print("PLAYER 2 WINS")
            sys.exit()

        else:
            printBoard(board)


from copy import deepcopy


def printBoard(board):
    print(board[0] + "(00)----------------------" + board[1] +
          "(01)----------------------" + board[2] + "(02)")
    print("|                           |                           |")
    print("|                           |                           |")
    print("|                           |                           |")
    print("|       " + board[8] + "(08)--------------" +
          board[9] + "(09)--------------" + board[10] + "(10)     |")
    print("|       |                   |                    |      |")
    print("|       |                   |                    |      |")
    print("|       |                   |                    |      |")
    print("|       |        " + board[16] + "(16)-----" +
          board[17] + "(17)-----" + board[18] + "(18)       |      |")
    print("|       |         |                   |          |      |")
    print("|       |         |                   |          |      |")
    print("|       |         |                   |          |      |")
    print(board[3] + "(03)---" + board[11] + "(11)----" + board[19] + "(19)               " +
          board[20] + "(20)----" + board[12] + "(12)---" + board[4] + "(04)")
    print("|       |         |                   |          |      |")
    print("|       |         |                   |          |      |")
    print("|       |         |                   |          |      |")
    print("|       |        " + board[21] + "(21)-----" +
          board[22] + "(22)-----" + board[23] + "(23)       |      |")
    print("|       |                   |                    |      |")
    print("|       |                   |                    |      |")
    print("|       |                   |                    |      |")
    print("|       " + board[13] + "(13)--------------" +
          board[14] + "(14)--------------" + board[15] + "(15)     |")
    print("|                           |                           |")
    print("|                           |                           |")
    print("|                           |                           |")
    print(board[5] + "(05)----------------------" + board[6] +
          "(06)----------------------" + board[7] + "(07)")
    print("\n")


def adjacentLocations(position):
    adjacent = [
        [1, 3],
        [0, 2, 9],
        [1, 4],
        [0, 5, 11],
        [2, 7, 12],
        [3, 6],
        [5, 7, 14],
        [4, 6],        
        [9, 11],
        [1, 8, 10, 17],
        [9, 12],
        [3, 8, 13, 19],
        [4, 10, 15, 20],
        [11, 14],
        [6, 13, 15, 22],
        [12, 14],
        [17, 19],
        [9, 16, 18],
        [17, 20],
        [11, 16, 21],
        [12, 18, 23],
        [19, 22],
        [21, 23, 14],
        [20, 22]
    ]
    return adjacent[position]


def isPlayer(player, board, p1, p2):
    if (board[p1] == player and board[p2] == player):
        return True
    else:
        return False


def checkNextMill(position, board, player):
    mill = [
        (isPlayer(player, board, 1, 2) or isPlayer(player, board, 3, 5)),
        (isPlayer(player, board, 0, 2) or isPlayer(player, board, 9, 17)),
        (isPlayer(player, board, 0, 1) or isPlayer(player, board, 4, 7)),
        (isPlayer(player, board, 0, 5) or isPlayer(player, board, 11, 19)),
        (isPlayer(player, board, 2, 7) or isPlayer(player, board, 12, 20)),
        (isPlayer(player, board, 0, 3) or isPlayer(player, board, 6, 7)),
        (isPlayer(player, board, 5, 7) or isPlayer(player, board, 14, 22)),
        (isPlayer(player, board, 2, 4) or isPlayer(player, board, 5, 6)),
        (isPlayer(player, board, 9, 10) or isPlayer(player, board, 11, 13)),
        (isPlayer(player, board, 8, 10) or isPlayer(player, board, 1, 17)),
        (isPlayer(player, board, 8, 9) or isPlayer(player, board, 12, 15)),
        (isPlayer(player, board, 3, 19) or isPlayer(player, board, 8, 13)),
        (isPlayer(player, board, 20, 4) or isPlayer(player, board, 10, 15)),
        (isPlayer(player, board, 8, 11) or isPlayer(player, board, 14, 15)),
        (isPlayer(player, board, 13, 15) or isPlayer(player, board, 6, 22)),
        (isPlayer(player, board, 13, 14) or isPlayer(player, board, 10, 12)),
        (isPlayer(player, board, 17, 18) or isPlayer(player, board, 19, 21)),
        (isPlayer(player, board, 1, 9) or isPlayer(player, board, 16, 18)),
        (isPlayer(player, board, 16, 17) or isPlayer(player, board, 20, 23)),
        (isPlayer(player, board, 16, 21) or isPlayer(player, board, 3, 11)),
        (isPlayer(player, board, 12, 4) or isPlayer(player, board, 18, 23)),
        (isPlayer(player, board, 16, 19) or isPlayer(player, board, 22, 23)),
        (isPlayer(player, board, 6, 14) or isPlayer(player, board, 21, 23)),
        (isPlayer(player, board, 18, 20) or isPlayer(player, board, 21, 22))
    ]

    return mill[position]


def isMill(position, board):
    p = board[position]
    # The player on that position
    if p != 'x':
        # If there is some player on that position
        return checkNextMill(position, board, p)
    else:
        return False


def numOfPieces(board, value):
    return board.count(value)


def removePiece(board_copy, board_list, player):
    for i in range(len(board_copy)):
        if player == '1':
            opp = '2'
        else:
            opp = '1'
        if (board_copy[i] == opp):
            if not isMill(i, board_copy):
                new_board = deepcopy(board_copy)
                new_board[i] = 'x'
                # Making a new board and emptying the position where piece is removed
                board_list.append(new_board)
    return board_list


def possibleMoves_stage1(board):
    board_list = []
    for i in range(len(board)):
        # Fill empty positions with player 1
        if (board[i] == 'x'):

            board_copy = deepcopy(board)
            board_copy[i] = '1'

            if (isMill(i, board_copy)):
                # Remove a piece if a mill is formed on that position
                board_list = removePiece(board_copy, board_list, '1')
            else:
                # No mill, so just append the position
                board_list.append(board_copy)

    return board_list


def possibleMoves_stage2(board, player):
    board_list = []
    for i in range(len(board)):
        if (board[i] == player):
            adjacent_list = adjacentLocations(i)

            for pos in adjacent_list:
                if (board[pos] == 'x'):

                    board_copy = deepcopy(board)
                    board_copy[i] = 'x'

                    board_copy[pos] = player

                    if isMill(pos, board_copy):

                        board_list = removePiece(
                            board_copy, board_list, player)
                    else:
                        board_list.append(board_copy)
    return board_list


def possibleMoves_stage3(board, player):
    board_list = []

    for i in range(len(board)):
        if (board[i] == player):
            for j in range(len(board)):
                if (board[j] == 'x'):
                    board_copy = deepcopy(board)

                    board_copy[i] = 'x'
                    board_copy[j] = player

                    if isMill(j, board_copy):

                        board_list = removePiece(
                            board_copy, board_list, player)
                    else:
                        board_list.append(board_copy)
    return board_list


def possibleMoves_stage2or3(board, player='1'):
    if numOfPieces(board, player) == 3:
        return possibleMoves_stage3(board, player)
    else:
        return possibleMoves_stage2(board, player)


if __name__ == "__main__":
    NAV_SAR()

_______________________________________________________________________________________________________
OUTPUT;

"C:\Users\hp\PycharmProjects\ASSIGNMENT 1\practice day\Scripts\python.exe" "C:/Users/hp/PycharmProjects/ASSIGNMENT 1/f final.py"
x(00)----------------------x(01)----------------------x(02)
|                           |                           |
|                           |                           |
|                           |                           |
|       x(08)--------------x(09)--------------x(10)     |
|       |                   |                    |      |
|       |                   |                    |      |
|       |                   |                    |      |
|       |        x(16)-----x(17)-----x(18)       |      |
|       |         |                   |          |      |
|       |         |                   |          |      |
|       |         |                   |          |      |
x(03)---x(11)----x(19)               x(20)----x(12)---x(04)
|       |         |                   |          |      |
|       |         |                   |          |      |
|       |         |                   |          |      |
|       |        x(21)-----x(22)-----x(23)       |      |
|       |                   |                    |      |
|       |                   |                    |      |
|       |                   |                    |      |
|       x(13)--------------x(14)--------------x(15)     |
|                           |                           |
|                           |                           |
|                           |                           |
x(05)----------------------x(06)----------------------x(07)



 PLAYER 1: Place a piece '1': 6

x(00)----------------------x(01)----------------------x(02)
|                           |                           |
|                           |                           |
|                           |                           |
|       x(08)--------------x(09)--------------x(10)     |
|       |                   |                    |      |
|       |                   |                    |      |
|       |                   |                    |      |
|       |        x(16)-----x(17)-----x(18)       |      |
|       |         |                   |          |      |
|       |         |                   |          |      |
|       |         |                   |          |      |
x(03)---x(11)----x(19)               x(20)----x(12)---x(04)
|       |         |                   |          |      |
|       |         |                   |          |      |
|       |         |                   |          |      |
|       |        x(21)-----x(22)-----x(23)       |      |
|       |                   |                    |      |
|       |                   |                    |      |
|       |                   |                    |      |
|       x(13)--------------x(14)--------------x(15)     |
|                           |                           |
|                           |                           |
|                           |                           |
x(05)----------------------1(06)----------------------x(07)



 PLAYER 2: Place a piece '2': 1

x(00)----------------------2(01)----------------------x(02)
|                           |                           |
|                           |                           |
|                           |                           |
|       x(08)--------------x(09)--------------x(10)     |
|       |                   |                    |      |
|       |                   |                    |      |
|       |                   |                    |      |
|       |        x(16)-----x(17)-----x(18)       |      |
|       |         |                   |          |      |
|       |         |                   |          |      |
|       |         |                   |          |      |
x(03)---x(11)----x(19)               x(20)----x(12)---x(04)
|       |         |                   |          |      |
|       |         |                   |          |      |
|       |         |                   |          |      |
|       |        x(21)-----x(22)-----x(23)       |      |
|       |                   |                    |      |
|       |                   |                    |      |
|       |                   |                    |      |
|       x(13)--------------x(14)--------------x(15)     |
|                           |                           |
|                           |                           |
|                           |                           |
x(05)----------------------1(06)----------------------x(07)



 PLAYER 1: Place a piece '1': 1

There is already a piece in position %d ! 1

 PLAYER 1: Place a piece '1': 
AND SO ON.........
 
        